import typing
from typing import ClassVar

from . import CellProperties
from . import Reader as core_Reader

class NetCDF(core_Reader):
    def __init__(self) -> None: ...
    def date(self, *args, **kwargs): ...
    def interpolate(self, lon: typing.SupportsFloat, lat: typing.SupportsFloat, fill_value: typing.SupportsFloat = ..., cell: CellProperties = ...) -> float: ...
    def load(self, name: str, unit: str = ...) -> None: ...
    def open(self, path: str) -> None: ...

class Type:
    __members__: ClassVar[dict] = ...  # read-only
    NETCDF: ClassVar[Type] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: typing.SupportsInt) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
