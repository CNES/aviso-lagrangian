#!/usr/bin/python
import lagrangian
import datetime
import netCDF4
import numpy
import argparse

# ./map_of_fle.py list.ini "2010-05-01 00:00:00.000" "2010-05-30 00:00:00.000"

def usage():
    parser = argparse.ArgumentParser(description='Compute Map of FLE')
    parser.add_argument('configuration', help='Configuration file')
    parser.add_argument('fle', help='Map of FLE in NetCDF format')
    parser.add_argument('start_time', help='Start time')
    parser.add_argument('end_time', help='End time')
    parser.add_argument('--step', help='Grid step in degrees', type=float,
                        default=1)
    parser.add_argument('--separation', help='Minimum separation in degrees',
                        type=float, metavar='SEP', default=-1)
    parser.add_argument('--delta', help='Time delta in hours', type=float,
                        default=6)
    parser.add_argument('--x_min', help='X min in degrees', type=float,
                        default=-180)
    parser.add_argument('--x_max', help='X max in degrees', type=float,
                        default=180)
    parser.add_argument('--y_min', help='Y min in degrees', type=float,
                        default=-90)
    parser.add_argument('--y_max', help='Y max in degrees', type=float,
                        default=90)
    return parser.parse_args()

def convert_from_sec_to_day(a, fill_value):
    result = numpy.ma.masked_equal(a, fill_value)
    result *= 86400
    return result.data

args = usage()

NC_FILL_DOUBLE=9.9692099683868690e+36

ts = lagrangian.TimeSerieField(args.configuration)
start_time = lagrangian.JulianDay(args.start_time)
end_time = lagrangian.JulianDay(args.end_time)
delta = datetime.timedelta(0, 6 * 60 * 60)

nx=int((args.x_max - args.x_min) / args.step)
ny=int((args.y_max - args.y_min) / args.step)

mode = lagrangian.kFTLE if args.separation < 0 else lagrangian.kFSLE
caption = 'FTLE' if args.separation < 0 else 'FSLE' 

map_of_fle=lagrangian.MapOfFiniteLyapunovExponents(nx, ny, args.x_min,
                                                   args.y_min, args.step)
fle=lagrangian.FiniteLyapunovExponents(start_time, end_time, delta,
                                       mode, args.separation, args.step, ts)
map_of_fle.Compute(fle)

rootgrp = netCDF4.Dataset(args.fle, 'w', format='NETCDF4')
rootgrp.createDimension('x', nx)
rootgrp.createDimension('y', ny)
rootgrp.title = 'Map of %s' % caption
if args.separation > 0:
    rootgrp.separation ='Minimum separation (expansion) in degrees: %f' % ( 
        args.separation)
rootgrp.start_time = start_time.ToString("%Y-%m-%d %T")
rootgrp.end_time = end_time.ToString("%Y-%m-%d %T")

x_axis = rootgrp.createVariable('x','f8',('x',))
x_axis.units = 'degrees_east'
x_axis[:] = map_of_fle.get_map_properties().GetXAxis()

y_axis = rootgrp.createVariable('y','f8',('y',))
y_axis.units = 'degrees_north'
y_axis[:] = map_of_fle.get_map_properties().GetYAxis()

theta1 = rootgrp.createVariable('theta1','f8',('x', 'y',),
                                fill_value=NC_FILL_DOUBLE)
theta1.long_name = 'theta1'
theta1.units = 'degrees'
theta1[:] = map_of_fle.GetMapOfTheta1(NC_FILL_DOUBLE, fle)

theta2 = rootgrp.createVariable('theta2','f8',('x', 'y',),
                                fill_value=NC_FILL_DOUBLE)
theta2.long_name = 'theta2'
theta2.units = 'degrees'
theta2[:] = map_of_fle.GetMapOfTheta2(NC_FILL_DOUBLE, fle)

lambda1 = rootgrp.createVariable('lambda1','f8',('x', 'y',),
                                 fill_value=NC_FILL_DOUBLE)
lambda1.long_name = 'lambda1'
lambda1.units = '1/day'
lambda1[:] = convert_from_sec_to_day(
        map_of_fle.GetMapOfLambda1(NC_FILL_DOUBLE, fle), NC_FILL_DOUBLE)

lambda2 = rootgrp.createVariable('lambda2','f8',('x', 'y',),
                                 fill_value=NC_FILL_DOUBLE)
lambda2.long_name = 'lambda2'
lambda2.units = '1/day'
lambda2[:] = convert_from_sec_to_day(
        map_of_fle.GetMapOfLambda2(NC_FILL_DOUBLE, fle), NC_FILL_DOUBLE)

rootgrp.close()
